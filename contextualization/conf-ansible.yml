---
- hosts: "{{IM_HOST}}"
  become: yes
  become_method: sudo
  gather_facts: false
  vars:
    # Ansible specific Version or "latest"
    ANSIBLE_VERSION: 2.9.21
  tasks:
    - name: Set Ansible version from env if defined
      set_fact: ANSIBLE_VERSION={{ lookup('env','ANSIBLE_VERSION') }}
      when: lookup('env','ANSIBLE_VERSION') != ""

  ############## To avoid some issues with cloud-init and unattended upgrades ###############
    - name: Avoid unattended upgrades
      raw: |
        sudo touch /var/lib/apt/periodic/upgrade-stamp; \
        sudo touch /var/lib/apt/periodic/update-stamp; \
        sudo touch /var/lib/apt/periodic/download-upgradeable-stamp;
      ignore_errors: yes
      changed_when: false

    - name: Wait the VM to boot
      raw: systemctl is-system-running --wait
      ignore_errors: yes
      changed_when: false

  ################### Some OSs does not have python by default #########################
    - name: Check Python is installed
      raw: python3 -c 'import sys; print(sys.version_info[1])'
      ignore_errors: yes
      register: python3_version
      changed_when: false

    - name: Bootstrap with python Debian/Ubuntu
      raw: sudo apt update && sudo apt install -y python3.5; sudo apt install -y python3
      ignore_errors: yes
      register: python_install
      changed_when: python_install.stdout_lines|length > 1
      when: python3_version is failed or python3_version.stdout|int < 5

    - name: Bootstrap with python RedHat/CentOS
      raw: sudo yum install -y python3
      ignore_errors: yes
      register: python_install
      changed_when: python_install.stdout_lines|length > 1
      when: python3_version is failed

    - name: Bootstrap with python SUSE
      raw: sudo zypper -n install python3 python3-xml
      ignore_errors: yes
      register: python_install
      changed_when: python_install.stdout_lines|length > 1
      when: python3_version is failed

     # In some cases python link is not created
    - name: Link python 3 or 2 in case is needed
      raw: ls /usr/bin/python || { ls /usr/bin/python3 && ln -s /usr/bin/python3 /usr/bin/python; } || { ls /usr/bin/python2 && ln -s /usr/bin/python2 /usr/bin/python; }
      ignore_errors: yes

    # In case of redhat systems libselinux-python3 is needed
    - name: Install libselinux-python3 on RH systems
      raw: yum -y install libselinux-python3
      ignore_errors: yes

  ################### Some basic OSs operations #########################
    - name: Get Facts
      setup:

    - name: Install EPEL
      command: yum install -y epel-release
      args:
        creates: /etc/yum.repos.d/epel.repo
      when: ansible_os_family == "RedHat" and ansible_distribution != "Fedora"

    - name: Ensure to Enable EPEL repo
      ini_file:
        dest: /etc/yum.repos.d/epel.repo
        section: epel
        option: enabled
        value: 1
      when: ansible_os_family == "RedHat" and ansible_distribution != "Fedora"
      ignore_errors: yes

    - name: Ubuntu/Debian apt update
      apt: update_cache=yes
      when: ansible_os_family == "Debian"
      ignore_errors: yes
      register: apt_update

    - name: Ubuntu/Debian force apt update (avoid apt lock)
      command: apt update
      when: ansible_os_family == "Debian" and apt_update is failed

  ################### Install Ansible/pip requisites #########################

    - name: Debian/Ubuntu install requisites with apt
      apt: name=python3-pip,wget,python3-setuptools,sshpass,openssh-client,unzip install_recommends=no
      when: ansible_os_family == "Debian"

    - name: Debian 10-/Ubuntu 16- install additional requisites with apt
      apt: name=libffi-dev,gcc,python3-dev install_recommends=no
      when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "16") or (ansible_distribution == "Debian" and ansible_distribution_major_version|int <= 10)

    - name: Yum install requisites RH 7/8 or Fedora
      command: yum install -y python3-pip python3-setuptools sshpass openssh-clients
      when: ansible_os_family == "RedHat"

    - name: Zypper install requirements Suse
      zypper: name=python3-pip,python3-setuptools,gcc,python3-devel,wget,libffi-devel,openssl-devel,python3-cryptography,make state=present
      when: ansible_os_family == "Suse"

    - name: Install python-setuptools
      package: name=python-setuptools
      when: ansible_os_family != "Alpine" and ansible_python_version is version('3', '<')

  ##################################################### Alpine support #######################################################

    - name: Apk install requirements Alpine
      package: name=py3-pip,py3-setuptools,sshpass,openssh-client,unzip,gcc,libffi-dev,openssl-dev,musl-dev,make,wget,python3-dev
      when: ansible_os_family == "Alpine"

    - name: Move original ps in Alpine
      command: mv /bin/ps /sbin/ps creates=/sbin/ps
      when: ansible_os_family == "Alpine"

    - name: Install ps with -p support in Alpine
      get_url:
        url: https://gist.githubusercontent.com/micafer/f74de4dc21a636df30d51202cbeee475/raw/388945406b9e9d225a0c7e95b97fc2515f1a17ef/ps_opt_p_enabled_for_alpine.sh
        dest: /bin/ps
        mode: 0755
        owner: root
        group: root
      when: ansible_os_family == "Alpine"

    - name: Pip install wheel Alpine
      pip: name=wheel
      when: ansible_os_family == "Alpine"

  ######################################### Use pip to enable to set the version #############################################

    # Version over 21 does not work with python 3.5 or older
    - name: Upgrade pip in py3.5
      pip:
        name: pip>18.0,<21.0
        executable: pip3
      when: ansible_python_version is version('3.7', '<')

    - name: Upgrade pip in py3.6 +
      pip:
        name: pip>18.0
        executable: pip3
      when: ansible_python_version is version('3.7', '>=')

    - name: Upgrade setuptools with Pip
      pip: name=setuptools state=latest executable=pip3

    - name: Install cryptography
      pip:
        name: cryptography<3.3
        executable: pip3

    - name: Install pyOpenSSL
      pip:
        name: pyOpenSSL>20.0,<21.0
        executable: pip3

    - name: Install pyyaml
      pip: name=pyyaml executable=pip3

    - name: Install ansible {{ ANSIBLE_VERSION }} with Pip
      pip: name=ansible version={{ ANSIBLE_VERSION }} executable=pip3
      when: ANSIBLE_VERSION != "latest"

    - name: Install latest ansible version with Pip
      pip: name=ansible state=latest executable=pip3
      when: ANSIBLE_VERSION == "latest"

#################################### Now install scp, jmespath and pywinrm with pip  ##################################

    - name: Install jmespath with Pip
      pip: name=jmespath executable=pip3

    - name: Install scp with Pip
      pip: name=scp executable=pip3

    - name: Install pywinrm with Pip
      pip: name=pywinrm executable=pip3
      ignore_errors: yes

################################################ Configure Ansible  ###################################################

    - name: Create /etc/ansible
      file: path=/etc/ansible state=directory

    - name: Create /etc/ansible/ansible.cfg
      file: path=/etc/ansible/ansible.cfg state=touch owner=root group=root mode=0644

    - name: Set Ansible config file values
      ini_file: dest=/etc/ansible/ansible.cfg section={{ item.section }} option={{ item.option }} value="{{ item.value }}"
      with_items:
      - { section: 'defaults', option: 'host_key_checking', value: 'False' }
      - { section: 'defaults', option: 'nocolor', value: '1' }
      - { section: 'ssh_connection', option: 'pipelining', value: 'True' }
      - { section: 'defaults', option: 'jinja2_extensions', value: 'jinja2.ext.do' }
      - { section: 'defaults', option: 'allow_world_readable_tmpfiles', value: 'True' }
      - { section: 'defaults', option: 'fact_caching', value: 'jsonfile' }
      - { section: 'defaults', option: 'fact_caching_connection', value: '/var/tmp/facts_cache' }
      - { section: 'defaults', option: 'fact_caching_timeout', value: '86400' }
      - { section: 'defaults', option: 'gathering', value: 'smart' }
      - { section: 'defaults', option: 'roles_path', value: '/etc/ansible/roles' }
      - { section: 'defaults', option: 'timeout', value: '30' }
      - { section: 'defaults', option: 'ansible_python_interpreter', value: 'auto' }
      - { section: 'defaults', option: 'transport', value: 'ssh' }
      - { section: 'ssh_connection', option: 'ssh_args', value: '-o ControlMaster=auto -o ControlPersist=900s -o UserKnownHostsFile=/dev/null' }

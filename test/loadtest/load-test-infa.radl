network publica (outbound = 'yes')
network privada ()

system im (
cpu.count>=1 and
memory.size>=2G and
net_interface.0.connection = 'publica' and
net_interface.1.connection = 'privada' and
net_interface.1.dns_name = 'imservice' and
disk.0.os.name='linux' and
disk.0.os.flavour='centos' and
disk.0.os.version >= '7' and
disk.0.os.credentials.new.password = 'Tututu+01'
)

system imclient (
cpu.count>=1 and
memory.size>=1G and
net_interface.0.connection = 'privada' and
net_interface.0.dns_name = 'imclient' and
disk.0.os.name='linux' and
disk.0.os.flavour='centos' and
disk.0.os.version >= '7' and
disk.0.os.credentials.new.password = 'Tututu+01'
)

system infra (
cpu.count>=8 and
memory.size>=8G and
net_interface.0.connection = 'privada' and
net_interface.0.dns_name = 'infra' and
disk.0.os.name='linux' and
disk.0.os.flavour='centos' and
disk.0.os.version >= '7' and
disk.0.os.credentials.new.password = 'Tututu+01' and
disk.0.applications contains (name='ansible.modules.grycap.docker')
)

configure docker (
@begin
    - name: add docker apt key
      apt_key: keyserver=hkp://pgp.mit.edu:80 id=58118E89F3A912897C070ADBF76221572C52609D state=present 
      when: ansible_os_family == "Debian"

    - name: add docker repository
      apt_repository: repo="deb https://apt.dockerproject.org/repo ubuntu-trusty main" state=present update_cache=yes 
      when: ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "14"  

    - name: add docker repository
      apt_repository: repo="deb https://apt.dockerproject.org/repo ubuntu-xenial main" state=present update_cache=yes 
      when: ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "16"  

    - name: install docker Deb
      apt: pkg=docker-engine,python-pip state=present update_cache=yes
      when: ansible_os_family == "Debian"
      
    - name: Create the /etc/yum.repos.d/docker.repo file
      copy:
        dest: /etc/yum.repos.d/docker.repo
        content: |
            [dockerrepo]
            name=Docker Repository
            baseurl=https://yum.dockerproject.org/repo/main/centos/7/
            enabled=1
            gpgcheck=1
            gpgkey=https://yum.dockerproject.org/gpg
        mode: 0644
        owner: root
        group: root
      when: ansible_os_family == "RedHat"

    - name: install EPEL
      yum: pkg=epel-release state=present
      when: ansible_os_family == "RedHat"

    - name: install docker RH
      yum: pkg=docker-engine,python-pip state=present
      when: ansible_os_family == "RedHat"

    - name: start docker
      service: name=docker state=started enabled=yes

    - name: Upgrade pip version
      pip: name=pip extra_args='-I' state=latest

    - name: install docker-py
    # user 1.9 version as ansible fails in case of 1.10 or higher 
      pip: name=docker-py version=1.9.0

@end
)

configure imdocker (
@begin
---
    - include: docker.yml

    - name: im container
      docker:
        name: im
        image: "grycap/im"
        state: started
        ports:
        - "8800:8800"
        - "8899:8899"
        expose:
        - 8899
        - 8800
@end
)

configure iminstall (
@begin
---
    - name: Install Reqs
      apt: name=git,gcc,python-dev,python-pip,python-mysqldb,openssh-client,sshpass,libssl-dev,libffi-dev,libsqlite3-dev update_cache=yes cache_valid_time=3600
      when: ansible_os_family == "Debian"
      
    - name: Yum install requirements RH or Fedora
      yum: name=git,gcc,python-distribute,gcc,python-devel,wget,openssh-clients,sshpass,python-pip,libffi-devel,openssl-devel,sqlite-devel
      when: ansible_os_family == "RedHat"

    - name: Install backports.ssl_match_hostname with Pip
      pip: name=backports.ssl_match_hostname
      
    - name: Download IM
      git: repo=https://github.com/grycap/im dest=/tmp/im

    - name: pip install IM
      pip: name=/tmp/im

    - name: Start IM
      service: name=im state=started

    - firewalld: service="8800/tcp" permanent=true state=enabled
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - firewalld: service="8899/tcp" permanent=true state=enabled
      when: ansible_os_family == "RedHat"
      ignore_errors: yes
@end
)

configure im (
@begin
---
  - tasks:
# To test the im directly installed at the VM
#    - include: iminstall.yml
# To test the im from a docker container
    - include: imdocker.yml

    - name: Install Reqs Deb
      apt: name=sysstat update_cache=yes cache_valid_time=3600
      when: ansible_os_family == "Debian"
      
    - name: Install Reqs RH
      yum: name=sysstat
      when: ansible_os_family == "RedHat"

    - name: Configure sysstat
      lineinfile: dest=/etc/default/sysstat regexp="^ENABLED=" line='ENABLED="true"'
      when: ansible_os_family == "Debian"

    - name: Configure cron sysstat
      #copy: dest=/etc/cron.d/sysstat content="*/1 * * * * root date >> /tmp/dates && /usr/lib/sysstat/debian-sa1 1 1\n"
      copy: dest=/etc/cron.d/sysstat content="*/1 * * * * root command -v /usr/lib/sysstat/debian-sa1 > /dev/null && /usr/lib/sysstat/debian-sa1 1 1\n"
      when: ansible_os_family == "Debian"

    - name: Restart sysstat
      service: name=sysstat state=restarted
      
    - name: Start sysstat
      shell: /usr/lib/sysstat/debian-sa1 1 1
      when: ansible_os_family == "Debian"
@end
)

configure imclient (
@begin
---
  - vars:
    - INFRA_NODE_IP: "{{ hostvars[groups['infra'][0]]['IM_NODE_NET_0_IP'] }}"
    tasks:
    - name: Install Reqs
      apt: name=gcc,python-dev,python-pip,python-mysqldb,openssh-client,sshpass,libssl-dev,libffi-dev,libsqlite3-dev,make update_cache=yes cache_valid_time=3600
      when: ansible_os_family == "Debian"
      
    - name: Yum install requirements RH or Fedora
      yum: name=git,gcc,python-distribute,gcc,python-devel,wget,openssh-clients,sshpass,python-pip,libffi-devel,openssl-devel,sqlite-devel,make
      when: ansible_os_family == "RedHat"

    - name: Install IM with Pip
      pip: name=IM

    - name: Create auth.dat file
      copy:
        dest: /tmp/auth.dat
        content: |
            type = InfrastructureManager; username = imuser01; password = invitado
            type = VMRC; host = http://servproject.i3m.upv.es:8080/vmrc/vmrc; username = demo; password = demo
            id = docker; type = Docker; host = http://{{INFRA_NODE_IP}}:2375
        mode: 0644

    - name: Download LoadTest.py
      get_url: url=https://raw.githubusercontent.com/grycap/im/master/test/loadtest/{{item}} dest=/tmp/{{item}}
      with_items:
       - LoadTest.py
       - load-test.radl
       - LoadTestR.py
       - LoadTestREST.py
       - LoadTestRESTR.py

@end
)

configure infra (
@begin
  - pre_tasks:
    - firewalld: port=2375/tcp permanent=true state=enabled immediate=yes
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    roles:
    - role: 'grycap.docker'
      docker_opts: '-H tcp://0.0.0.0:2375'

    tasks:
    - meta: flush_handlers
    - command: docker -H tcp://localhost:2375 pull ubuntu:14.04
@end
)

deploy im 1
deploy imclient 1
deploy infra 1

network publica (outbound = 'yes')
network privada ()

system im (
cpu.count>=2 and
memory.size>=2G and
net_interface.0.connection = 'publica' and
net_interface.1.connection = 'privada' and
net_interface.1.dns_name = 'imservice' and
disk.0.os.name='linux' and
disk.0.os.flavour='ubuntu' and
disk.0.os.version>='16.04' and
disk.0.os.credentials.new.password = 'Tututu+01' and
disk.0.applications contains (name='ansible.modules.grycap.docker')
)

system immysql (
cpu.count>=2 and
memory.size>=4G and
net_interface.0.connection = 'privada' and
net_interface.0.dns_name = 'immysql' and
disk.0.os.name='linux' and
disk.0.os.flavour='ubuntu' and
disk.0.os.version>='16.04' and
disk.0.os.credentials.new.password = 'Tututu+01' and
disk.0.applications contains (name='ansible.modules.grycap.docker')
)

system imclient (
cpu.count>=2 and
memory.size>=2G and
net_interface.0.connection = 'privada' and
net_interface.0.dns_name = 'imclient' and
disk.0.os.name='linux' and
disk.0.os.flavour='ubuntu' and
disk.0.os.version>='16.04' and
disk.0.os.credentials.new.password = 'Tututu+01'
)

system infra (
cpu.count>=2 and
memory.size>=2G and
net_interface.0.connection = 'privada' and
net_interface.0.dns_name = 'infra' and
disk.0.os.name='linux' and
disk.0.os.flavour='ubuntu' and
disk.0.os.version >= '16.04' and
disk.0.os.credentials.new.password = 'Tututu+01' and
disk.0.applications contains (name='ansible.modules.grycap.kubernetes')
)

system infrawn (
cpu.count>=4 and
memory.size>=8G and
net_interface.0.connection = 'privada' and
net_interface.0.dns_name = 'infrawn' and
disk.0.os.name='linux' and
disk.0.os.flavour='ubuntu' and
disk.0.os.version >= '16.04' and
disk.0.os.credentials.new.password = 'Tututu+01' and
disk.0.applications contains (name='ansible.modules.grycap.kubernetes')
)


configure im (
@begin
---
  - vars:
     IMVERSION: 1.8.7-dev2
     IM_MYSQL_IP: "{{ hostvars[groups['immysql'][0]]['IM_NODE_PRIVATE_IP'] }}"
     IM_SERVICE_IP: "{{ hostvars[groups['im'][0]]['IM_NODE_PRIVATE_IP'] }}"
     IM_PORTS: 
#         - {xmlrpc: 7799, rest: 8801}
#         - {xmlrpc: 6699, rest: 8802}
         - {xmlrpc: 8899, rest: 8800}
    roles:
     - { role: 'grycap.docker' }
    tasks:
    - name: Waits for MySQL to start
      wait_for:
        host: "{{ IM_MYSQL_IP }}"
        port: 3306

    - name: im container
      docker_container:
        name: im-{{item.xmlrpc}}
        image: "grycap/im:{{ IMVERSION }}"
        state: started
        ports:
        - "{{item.rest}}:8800"
        - "{{item.xmlrpc}}:8899"
        expose:
        - 8899
        - 8800
        env:
            IM_DATA_DB: "mysql://root:impass@{{ IM_MYSQL_IP }}/imdb"
      with_items: "{{IM_PORTS}}"

    - block:
      
      - name: Create HAProxy template
        copy:
          dest: /etc/haproxy_tomcat.cfg.j2
          content: |
              defaults
                  timeout connect      5000
                  timeout client       50000
                  timeout server       50000
                  mode http

              listen statistics
                  bind *:9000
                  mode http
                  stats enable
                  stats realm Haproxy\ Statistics
                  stats uri /haproxy_stats
                  stats auth micafer:grycap01

              frontend http-frontend
                  bind *:8800
                  default_backend imbackend

              backend imbackend
                  balance roundrobin
                  stick-table type string len 32 size 30k expire 120m
                  stick store-response hdr(InfID)
                  #stick on hdr(InfID)
                  acl inf_id path -m beg /infrastructures/
                  #acl inf_id path_len gt 40
                  stick on path,field(3,/) if inf_id


              {% raw %}
              {% for port in IM_PORTS %}
                  server im-{{port.rest}} {{IM_SERVICE_IP}}:{{port.rest}} check
              {% endfor %}{% endraw %}

      - name: Configure HAProxy
        template: src=/etc/haproxy_tomcat.cfg.j2 dest=/etc/haproxy.cfg mode=0644

      - name: start haproxy container
        docker_container:
          name: haproxy
          image: "haproxy:latest"
          state: started
          ports:
          - "8800:8800"
          - "9000:9000"
          expose:
          - 8800
          - 9000
          volumes:
          - "/etc/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"

      when: IM_PORTS|length>1

    - name: Install Reqs
      apt: name=sysstat update_cache=yes cache_valid_time=3600
      when: ansible_os_family == "Debian"
      
    - name: Install Reqs
      yum: name=sysstat
      when: ansible_os_family == "RedHat"

    - name: Configure sysstat
      lineinfile: dest=/etc/default/sysstat regexp="^ENABLED=" line='ENABLED="true"'
      when: ansible_os_family == "Debian"

    - name: Configure cron sysstat
      #copy: dest=/etc/cron.d/sysstat content="*/1 * * * * root date >> /tmp/dates && /usr/lib/sysstat/debian-sa1 1 1\n"
      copy: dest=/etc/cron.d/sysstat content="*/1 * * * * root command -v /usr/lib/sysstat/debian-sa1 > /dev/null && /usr/lib/sysstat/debian-sa1 1 1\n"
      when: ansible_os_family == "Debian"

    - name: Restart sysstat
      service: name=sysstat state=restarted
      
    - name: Start sysstat
      shell: /usr/lib/sysstat/debian-sa1 1 1
      when: ansible_os_family == "Debian"
@end
)

configure immysql (
@begin
---
  - roles:
    - role: 'grycap.docker'

    tasks:
    - name: mysql container
      docker_container:
        name: immysql
        image: "mysql:5.7"
        state: started
        published_ports:
          - "3306:3306"
        env:
            MYSQL_ROOT_PASSWORD: impass
            MYSQL_DATABASE: imdb 

    - name: Download test inf.dat
      get_url: url=https://raw.githubusercontent.com/grycap/im/devel/test/loadtest/data.sql dest=/var/tmp/data.sql

    - name: Initialize IM data
      shell: docker exec -i immysql mysql -uroot -pimpass imdb < /var/tmp/data.sql

    - name: Install Reqs Deb
      apt: name=sysstat update_cache=yes cache_valid_time=3600
      when: ansible_os_family == "Debian"
      
    - name: Install Reqs RH
      yum: name=sysstat
      when: ansible_os_family == "RedHat"

    - name: Configure sysstat
      lineinfile: dest=/etc/default/sysstat regexp="^ENABLED=" line='ENABLED="true"'
      when: ansible_os_family == "Debian"

    - name: Configure cron sysstat
      #copy: dest=/etc/cron.d/sysstat content="*/1 * * * * root date >> /tmp/dates && /usr/lib/sysstat/debian-sa1 1 1\n"
      copy: dest=/etc/cron.d/sysstat content="*/1 * * * * root command -v /usr/lib/sysstat/debian-sa1 > /dev/null && /usr/lib/sysstat/debian-sa1 1 1\n"
      when: ansible_os_family == "Debian"

    - name: Restart sysstat
      service: name=sysstat state=restarted
      
    - name: Start sysstat
      shell: /usr/lib/sysstat/debian-sa1 1 1
      when: ansible_os_family == "Debian"
@end
)

configure imclient (
@begin
---
  - vars:
     INFRA_NODE_IP: "{{ hostvars[groups['infra'][0]]['IM_NODE_NET_0_IP'] }}"
     DURATION: 300
     THREADS_READ: 10
     THREADS_WRITE: 5
     RAND_DELAY: 10
     CONST_DELAY: 10
    tasks:
    - name: Install Reqs
      apt: name=openjdk-8-jdk update_cache=yes cache_valid_time=3600

    - name: Download apache-jmeter-5.1.1.tgz
      get_url: url=http://ftpgrycap.i3m.upv.es/src/apache-jmeter-5.1.1.tgz dest=/opt/apache-jmeter-5.1.1.tgz
      
    - name: Extract apache-jmeter in /opt
      unarchive:
        src: /opt/apache-jmeter-5.1.1.tgz
        dest: /opt/
        creates: /opt/apache-jmeter-5.1.1
        remote_src: yes

    - name: Create test.sh file
      copy:
        dest: /var/tmp/test.sh
        content: |
          #!/bin/bash 
          /opt/apache-jmeter-5.1.1/bin/jmeter -n -t /var/tmp/im_load_tests.jmx -JIMHOST=imservice -JKUBE_IP={{INFRA_NODE_IP}} -JTHREADS_READ={{ THREADS_READ }} -JTHREADS_WRITE={{ THREADS_WRITE }} -JDURATION={{ DURATION }} -JCONST_DELAY={{ CONST_DELAY }} -JRAND_DELAY={{ RAND_DELAY }}          
        mode: 0755

    - name: Download LoadTest files
      get_url: url=https://raw.githubusercontent.com/grycap/im/devel/test/loadtest/{{item}} dest=/var/tmp/{{item}}
      with_items:
       - im_load_tests.jmx

@end
)

configure infrawn (
@begin
  - roles:
    - role: 'grycap.kubernetes'
      kube_type_of_node: 'wn'
      kube_server: 'infra'
@end
)

configure infra (
@begin
  - pre_tasks:
    - firewalld: port=6443/tcp permanent=true state=enabled immediate=yes
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Create auth file dir
      file: path=/etc/kubernetes/pki state=directory mode=755 recurse=yes
    - name: Create auth data file with an admin user
      copy: content='sometoken,kubeuser,100,"users,system:masters"' dest=/etc/kubernetes/pki/auth mode=600

    roles:
    - role: 'grycap.kubernetes'
      kube_server: 'infra'
      kube_apiserver_options: [{option: "--insecure-port", value: "8080"}, {option: "--token-auth-file", value: "/etc/kubernetes/pki/auth"}]
      kube_deploy_dashboard: false
      kube_install_helm: false
@end
)

deploy im 1
deploy imclient 1
deploy infra 1
deploy infrawn 1
deploy immysql 1
# Namespace
---
apiVersion: v1
kind: Namespace
metadata:
  name: im
---

# Auth data
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: im-ingress-controller
  namespace: im
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: im-ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: im-ingress-controller
  namespace: im
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - create
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: im-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: im-ingress-controller
subjects:
  - kind: ServiceAccount
    name: im-ingress-controller
    namespace: im
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: im-ingress-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: im-ingress-controller
  namespace: im
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: im-ingress-controller
subjects:
  - kind: ServiceAccount
    name: im-ingress-controller
    namespace: im
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: im-ingress-controller

# Persistent Volumes in NFS
# Adapt to you real installation
# Volume for MySQL data
---
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: im
  name: pvnfsmysql
spec:
  storageClassName: mysql
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  mountOptions:
    - nolock
    - hard
  nfs:
    path: /pv/mysql
    server: kubeserver

# Volume for log data
---
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: im
  name: pvnfslog
spec:
  storageClassName: imlog
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  mountOptions:
    - nolock
    - hard
  nfs:
    path: /pv/log
    server: kubeserver

# Corresponding Volume Claims
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: im
  name: imdb
spec:
  storageClassName: mysql
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: im
  name: imlog
spec:
  storageClassName: imlog
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi

# Deployments for the IM service

# MySQL to store IM data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  name: im-mysql
  labels:
    app: im
    tier: im-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: im
      tier: im-mysql
  template:
    metadata:
      labels:
        name: im-mysql
        app: im
        tier: im-mysql
    spec:
      containers:
        - name: im-mysql
          image: mysql:5.6
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
          ports:
          - containerPort: 3306
            name: mysql
          env:
           - name: MYSQL_ROOT_PASSWORD
             value: im-mysql-pass
           - name: MYSQL_DATABASE
             value: im-db
          volumeMounts:
           - name: im-mysql-db
             mountPath: /var/lib/mysql
          livenessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 2
      volumes:
        - name: im-mysql-db
          persistentVolumeClaim:
            claimName: imdb
---
apiVersion: v1
kind: Service
metadata:
  namespace: im
  name: im-mysql
  labels:
    app: im
spec:
  ports:
  - port: 3306
    protocol: TCP
  selector:
    name: im-mysql

# IM components
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: im
  name: im
data:
  im.cfg: |
    [im]
    # if you need to add more values check: https://raw.githubusercontent.com/grycap/im/master/etc/im.cfg
    ACTIVATE_XMLRPC = False
    ACTIVATE_REST = True
    INF_CACHE_TIME = 3600
    PLAYBOOK_RETRIES = 3
  logging.conf: |
    [loggers]
    keys=root,ConfManager,CloudConnector,InfrastructureManager
    [handlers]
    keys=fileHandler
    [formatters]
    keys=simpleFormatter
    [logger_root]
    level=ERROR
    handlers=fileHandler
    [logger_ConfManager]
    level=DEBUG
    handlers=fileHandler
    qualname=ConfManager
    propagate=0
    [logger_CloudConnector]
    level=DEBUG
    handlers=fileHandler
    qualname=CloudConnector
    propagate=0
    [logger_InfrastructureManager]
    level=DEBUG
    handlers=fileHandler
    qualname=InfrastructureManager
    propagate=0
    [handler_fileHandler]
    class=logging.handlers.SysLogHandler
    level=DEBUG
    formatter=simpleFormatter
    args=(('im-log', 514),)
    [formatter_simpleFormatter]
    format=%(asctime)s - %(hostname)s - %(name)s - %(levelname)s - %(message)s
    datefmt=

# IM deployment: only set 1 replica
# if you need an HA deployment you must use 
# an HA proxy.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  name: im-backend
  labels:
    run: im-backend
spec:
  replicas: 4
  selector:
    matchLabels:
      run: im-backend
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        run: im-backend
    spec:
      containers:
      - name: im
        image: grycap/im
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
        ports:
        - containerPort: 8800
        imagePullPolicy: Always
        env:
          - name: IM_DATA_DB
            value: mysql://root:im-mysql-pass@im-mysql/im-db
        volumeMounts:
           - name: im
             mountPath: /etc/im/logging.conf
             subPath: logging.conf
           - name: im
             mountPath: /etc/im/im.cfg
             subPath: im.cfg
        livenessProbe:
          httpGet:
            path: /version
            port: 8800
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 2
      volumes:
        - name: im
          configMap:
            name: im

---
apiVersion: v1
kind: Service
metadata:
  name: im-backend
  namespace: im
spec:
  ports:
  - port: 8800
  selector:
    run: im-backend

# ConfigMap of the haproxy-ingress see: https://github.com/jcmoraisjr/haproxy-ingress#configmap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-ingress
  namespace: im
data:
  stats-auth: "micafer:grycap01"
  haproxy.tmpl: |
    {{- $ing := . -}}
    {{- $cfg := .Cfg -}}
    defaults
        log global
        timeout http-request    {{ $cfg.TimeoutHTTPRequest }}
        timeout connect         {{ $cfg.TimeoutConnect }}
        timeout client          {{ $cfg.TimeoutClient }}
        timeout client-fin      {{ $cfg.TimeoutClientFin }}
        timeout server          {{ $cfg.TimeoutServer }}
        timeout server-fin      {{ $cfg.TimeoutServerFin }}
        timeout tunnel          {{ $cfg.TimeoutTunnel }}
        timeout http-keep-alive {{ $cfg.TimeoutKeepAlive }}
        mode http
    ######
    ###### Stats page
    ######
    listen stats
        bind *:{{ $cfg.StatsPort }}{{ if $cfg.StatsProxyProtocol }} accept-proxy{{ end }}
        mode http
        stats enable
        stats realm HAProxy\ Statistics
    {{- if ne $cfg.StatsAuth "" }}
        stats auth {{ $cfg.StatsAuth }}
    {{- end }}
        stats uri /
        no log
    frontend http-frontend
            bind *:80
            default_backend imbackend
    backend imbackend
            option httpchk GET /version
            balance roundrobin
            stick-table type string len 32 size 30k expire 120m
            stick store-response hdr(InfID)
            #stick on hdr(InfID)
            acl inf_id path -m beg /infrastructures/
            #acl inf_id path_len gt 40
            stick on path,field(3,/) if inf_id
    {{- if $ing.Backends -}}
    {{- $backend := index $ing.Backends 0 -}}
    {{- $BackendSlots := index $ing.BackendSlots $backend.Name }}
    {{- range $target, $slot := $BackendSlots.FullSlots }}
        server {{ $slot.BackendServerName }} {{ $target }} check port {{ $slot.BackendEndpoint.Port }} inter {{ $cfg.BackendCheckInterval }}
    {{- end }}
    {{- range $empty := $BackendSlots.EmptySlots }}
        server {{ $empty }} 127.0.0.1:81 check disabled inter {{ $cfg.BackendCheckInterval }}
    {{- end }}
    {{- end }}{{/* if Backends */}}


# Ingress controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  labels:
    run: haproxy-ingress
  name: haproxy-ingress
spec:
  selector:
    matchLabels:
      run: haproxy-ingress
  template:
    metadata:
      labels:
        run: haproxy-ingress
    spec:
      serviceAccountName: im-ingress-controller
      containers:
      - name: haproxy-ingress
        #image: grycap/haproxy-ingress-im
        image: quay.io/jcmoraisjr/haproxy-ingress
        args:
        - --default-backend-service=$(POD_NAMESPACE)/im-backend
        - --configmap=$(POD_NAMESPACE)/haproxy-ingress
        - --sort-backends
        ports:
        - name: http
          containerPort: 80
        - name: stat
          containerPort: 1936
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
           - name: haproxy-ingress
             mountPath: /etc/haproxy/template/haproxy.tmpl
             subPath: haproxy.tmpl
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 20
          periodSeconds: 20
      volumes:
        - name: haproxy-ingress
          configMap:
            name: haproxy-ingress
# Ingress controller service
---
apiVersion: v1
kind: Service
metadata:
  name: im-ingress-svc
  namespace: im
spec:
  type: NodePort
  ports:
  - name: https
    port: 80
# Open also the stats port
  - name: stats
    port: 1936
    nodePort: 30009
  selector:
    run: haproxy-ingress

# Deployment for the Syslog service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  name: im-log
  labels:
    app: im
    tier: im-log
spec:
  replicas: 1
  selector:
    matchLabels:
      app: im
      tier: im-log
  template:
    metadata:
      labels:
        name: im-log
        app: im
        tier: im-log
    spec:
      containers:
        - name: im-log
          image: voxxit/rsyslog
          ports:
          - containerPort: 514
            protocol: TCP
            name: syslogtcp
          - containerPort: 514
            protocol: UDP
            name: syslog
          volumeMounts:
           - name: im-logs
             mountPath: /var/log
          livenessProbe:
            tcpSocket:
              port: 514
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 2
      volumes:
        - name: im-logs
          persistentVolumeClaim:
            claimName: imlog
# And the service
---
apiVersion: v1
kind: Service
metadata:
  namespace: im
  name: im-log
  labels:
    app: im
spec:
  ports:
  - port: 514
    protocol: TCP
    targetPort: 514
    name: logtcp
  - port: 514
    protocol: UDP
    targetPort: 514
    name: logudp
  selector:
    name: im-log

# In case you want to track web usage using Google Analytics
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: im-web
  namespace: im
data:
  analyticstracking.php: |
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script>
    </script>
 
# Deployment for the IM-web service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  name: im-web
  labels:
    app: im
    tier: im-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: im
      tier: im-web
  template:
    metadata:
      labels:
        name: im-web
        app: im
        tier: im-web
    spec:
      containers:
        - name: im-web
          image: grycap/im-web
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
          ports:
          - containerPort: 80
            protocol: TCP
            name: http
          env:
          - name: im_use_rest
            value: "true"
          - name: im_host
            value: im-ingress-svc
          - name: im_port
            value: "80"
          - name: im_db
            value: mysql://root:im-mysql-pass@im-mysql/im-web
          volumeMounts:
           - name: im-web
             mountPath: /var/www/html/im-web/analyticstracking.php
             subPath: analyticstracking.php
          livenessProbe:
            httpGet:
              path: /im-web/
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 2
      volumes:
        - name: imdb
          persistentVolumeClaim:
            claimName: imdb
        - name: im-web
          configMap:
            name: im-web


# IM-Web interface
---
apiVersion: v1
kind: Service
metadata:
  name: im-web-svc
  namespace: im
spec:
  ports:
  - name: http
    port: 80
  selector:
    name: im-web

# Deployments for the nginx service
# It uses a self-signed certificate. Put a correct one. 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
  namespace: im
data:
  server.crt: |
    -----BEGIN CERTIFICATE-----
    MIIE5DCCAsygAwIBAgIDATklMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNVBAMMFmt1
    YmVzZXJ2ZXIubG9jYWxkb21haW4wHhcNMTgxMTA5MDg0NjM3WhcNMjgxMTA2MDg0
    NjM3WjAhMR8wHQYDVQQDDBZrdWJlc2VydmVyLmxvY2FsZG9tYWluMIICIjANBgkq
    hkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAy+speGAUBvWTv62buCDa/jUXjxgzuHG+
    sMubliXbPUohteJ7np49YG0vtfUu8maXWTYhLWP5as3lg4L7za1K7JFao46XJ0dg
    DyK4bcSFuFaEPN1t4LL55NAUz+0xiaTL5A8bZhlwdJkRIbsy7TWUqQmFAckREPQF
    uM8faYP7pBK5ATuWICAVASHrdUAcCxmkTrgKTVG3TaBwi5/2K6L/8H5NO0fiX/W2
    jFJTFk1dgimdRGjHF2XdDHzP8+azHkcUNd9naNXDFjS9flCQkl5YJXDWJ7VvRwGB
    RUZCz2P/yJfV+FJ7Wd3JNm6xgSfy3Wrj1qzlTZIKAQzClxi3Fb14gaZV6T5QF20O
    GmXRNo4DOTLAjki6e/xyuYBD/5pBJONuQcGUpvtxYdQ8RWAbBnqjO9tvNXzSkoU9
    3DxpMKP8UQPWJRa6I7tfr240aI8pMny3N8JInKA3470kbtC79jBBhQkBcobYSkI9
    EPDp1KfoOv9NYQkcXOW8uJheauVA3xyCA2aBv+qi0xFTzer6BCPmMj/3CJ24xRPj
    vVkcsh2nvK4eE4a5XYqE2ETkjczAt/GtJdYZ35SmNOectntrBvOSVUFIy8xnLAws
    wxA4YTIECFMoGfpHZS0Dg4MJXupWG88Bik3kv0s/CtQJTzSWRAJiFUPu3sqZ+UxV
    k2SOEbW5AecCAwEAAaMlMCMwIQYDVR0RBBowGIIWa3ViZXNlcnZlci5sb2NhbGRv
    bWFpbjANBgkqhkiG9w0BAQsFAAOCAgEATOH4tr5PmJ2Gu4FnxuTAbYHhrFnF5PcI
    4jDNoNYoZcW27nk9Y3IB6kT/p5Ad64qQo8w82XzyY+Y/MBRh2MxeND2i6ilUq3iD
    BfVwnkPrR3JlfdTbkj1ea/gNdTzPlBwVLfMCrFk7fYLGYu64ei+B4NE8Z6ZBqfHh
    F3z0WQI8iYnahgiYeCT+lwh7j/Gwu+nC8Kngk6f51oVOMGNw6l/zi1kaa9f+p+5Z
    P8/RKJ9fbwYiqeHF/E84qm1LaXtamGP86IJokVidLnigZexX18qkXeT7RAt0rQdB
    iPUo3pPPJXB1b7m07qzRxKKs7CTLS+xbhgmmjwfoReCurgMHj6gDLvKWzAPlRG98
    6plQ6UhjBpi7S1EFCaLAxt5//q2VPwX9PBQQyQKjW905+YY0nlZTUdqh0q3tQYf4
    ddc15jqGN6J8XOz0OAY629p0vHrusignqhwMZ7PMrIVGCy7hTibtLVDl3orbmA3H
    2EDCb5z3XfhaDt/tI/Tkt0BipWnDM87JwKu+YLJP5yGdXKaS4IbB5b4MmYEDFZNZ
    Orw4Aruz9N7q3uG3zH0CMZjfjqDK14EcV0b2+8MOmvVQ2xT5ZN4yCCxroyFDQEEH
    7a0ESlMmEZSHyyQgz1ZXS606Y76WEsQ7hLSVE5raqjF2gNt36RUR5vRG0/P0A4lC
    Ai4IydPHQ3A=
    -----END CERTIFICATE-----
  server.key: |
    -----BEGIN PRIVATE KEY-----
    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
    RL/36SxGWtbz0G5Mrmq8zl3I8zZaJQ==
    -----END PRIVATE KEY-----
  default.conf: |
      server {
            listen         80;
            return         301 https://$server_name$request_uri;
      }
      server {
        listen        443 ssl;
        access_log   /var/log/nginx/access.log  combined;
        send_timeout 1800;
        large_client_header_buffers 4 32k;
        ssl on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate      /etc/nginx/server.crt;
        ssl_certificate_key  /etc/nginx/server.key;
        location /im/   {
          proxy_pass              http://im-ingress-svc/;
          proxy_set_header        X-Real-IP $remote_addr;
          proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header        X-Forwarded-Proto https;
          proxy_set_header        Host $http_host;
          proxy_set_header        X-Forwarded-Prefix /im;
          proxy_connect_timeout 1800;
          proxy_send_timeout 1800;
          proxy_read_timeout 1800;
        }
        location /im-web/ {
          proxy_pass              http://im-web-svc/im-web/;
          proxy_set_header        X-Real-IP $remote_addr;
          proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header        X-Forwarded-Proto https;
          proxy_set_header        Host $http_host;
          proxy_set_header        X-Forwarded-Prefix /im-web;
          proxy_connect_timeout 1800;
          proxy_send_timeout 1800;
          proxy_read_timeout 1800;
        }
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
      }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  nginx
  namespace: im
spec:
  selector:
    matchLabels:
      name: nginx
  replicas: 2
  template:
    metadata:
      labels:
        name:  nginx
    spec:
      containers:
        - name: nginx
          image:  nginx
          ports:
          - containerPort: 443
            name: https
          - containerPort: 80
            name: http
          volumeMounts:
           - name: nginx
             mountPath: /etc/nginx/conf.d/default.conf 
             subPath: default.conf
           - name: nginx
             mountPath: /etc/nginx/server.key
             subPath: server.key
           - name: nginx
             mountPath: /etc/nginx/server.crt
             subPath: server.crt
          livenessProbe:
            httpGet:
              path: /
              port: 443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 20
      volumes:
        - name: nginx
          configMap:
            name: nginx

# Service for the nginx service
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: im
spec:
  type: NodePort
  ports:
  - name: http
    port: 80
  - name: https
    port: 443
    nodePort: 31443
  selector:
    name: nginx
